initialize() {
	suppressWarnings(T);
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(nucleotideBased=T);
	initializeTreeSeq();

	defineConstant("L", initializeAncestralNucleotides(ref_path));
	initializeRecombinationRate(0);

	initializeMutationTypeNuc(0, 1, "f", 0.0); // Neutral mutations
	if (use_subst_matrix==0)
	{
		initializeGenomicElementType(0, 0, 1.0, mmJukesCantor(mu / 3));
	}
	else
	{
		mm1 = readCSV(mtx_path, colNames = T);
		defineGlobal("mm", mm1.asMatrix());
		initializeGenomicElementType(0, 0, 1.0, mutationMatrix = mm);
	}

	initializeGenomicElement(0, 0, L - 1);
	print(g0.mutationMatrix);
}

1 early() {
	labels = c();
	for (i in 1:host_size)
	{
		if (any(i == seeded_host_id + 1))
		{
			sim.addSubpop(i - 1, 1, haploid=T);  // Infected hosts
			current_subpop = sim.subpopulations[i - 1];
			labels = c(labels, 2);
		}
		else
		{
			sim.addSubpop(i - 1, 0, haploid=T); // Susceptible
			sim.subpopulations[i - 1].tag = i - 1;
			labels = c(labels, 0);
		}
		sim.subpopulations[i - 1].setValue("Contacts", c());
	}

	defineGlobal("Host_states", labels);

	if (strsuffix(cwdir, "/") == F)
	{
		defineGlobal("wk_dir", paste0(cwdir, "/"));
	}
	else
	{
		defineGlobal("wk_dir", cwdir);
	}
}

1 first() {
	community.rescheduleScriptBlock(s0, ticks = n_generation);
}


1 early() {
	// Read into the contact network file
	lines_contact = readFile(contact_network_path);

	for (l in lines_contact)
	{
		if (strprefix(l, "#") == F)
		{
			ll = strsplit(l, " ");
			ll = asInteger(strsplit(l, " "));
			host = ll[0];
			contact_size = length(ll) - 1;
			if (contact_size > 0)
			{
				contact_dict = Dictionary();
				contact_dict.setValue("Contacts", ll[1:contact_size]);
				current_contact = Dictionary();
				current_contact.setValue("Contacts", host);
				sim.subpopulations[host].appendKeysAndValuesFrom(contact_dict);
				for (each_contact in ll[1:contact_size])
				{
					sim.subpopulations[each_contact].appendKeysAndValuesFrom(current_contact);
				}
			}
		}
	}
}


1: reproduction() {
	subpops_inds = sim.subpopulations.individuals;
	subpops = subpops_inds.subpopulation;
	num_inds = length(subpops_inds);
	for (pathogen in 1:num_inds)
	{
		this_pathogen = subpops_inds[pathogen - 1];
		subpops[pathogen - 1].addRecombinant(this_pathogen.genome1, NULL, NULL, NULL, NULL, NULL);
	}
	self.active = 0;
}


1: reproduction()
{
	// Transmission
	infectors = which(Host_states==2);
	subpops = sim.subpopulations;
	infector_subpops = subpops[infectors];

	for (infector_subpop in infector_subpops)
	{	
		contact_ids = infector_subpop.getValue("Contacts");
		if (length(contact_ids)>0)
		{
			infector_pathogen = infector_subpop.individuals[0];

			trans_event = rbinom(length(contact_ids), 1, S_IE_rate);
			contacts_states = Host_states[contact_ids];
			
			infectee_id = contact_ids[which((trans_event==1)&(contacts_states==0))];

			for (i in infectee_id)
			{
				subpops[i].addRecombinant(infector_pathogen.genome1, NULL, NULL, NULL, NULL, NULL);
			}
		}
	}
	self.active=F;
}


1: early()
{
	inds = sim.subpopulations.individuals;
	sim.killIndividuals(inds[inds.age > 0]);
}


1: early()
{
	hosts = sim.subpopulations;
	
	// State transitions for exposed hosts
	e_inds = which(Host_states==1);

	draw_uniform = runif(length(e_inds));
	state_transition = findInterval(draw_uniform, c(0, E_I_rate, E_I_rate + E_R_rate));
	Host_states[e_inds[which(state_transition==0)]] = 2; // state_transition=0 means going from latent to active state (1>2)
	recover_from_e = e_inds[which(state_transition==1)];
	if (length(recover_from_e)>0)
	{
		Host_states[recover_from_e]=3;
		sim.killIndividuals(hosts[recover_from_e].individuals);
	}
}


1: early(){
	i_inds = which(Host_states==2);
	hosts = sim.subpopulations;
	draw_uniform = runif(length(i_inds));
	sample_rate = 0;
	state_transition = findInterval(draw_uniform, c(0, 0, 0, I_R_rate, I_R_rate + I_E_rate));
	recover_from_i = i_inds[which((state_transition<=2))];
	go_latent_inds = i_inds[which((state_transition==3))];

	if (length(recover_from_i)>0)
	{
		Host_states[recover_from_i]=3;
		sim.killIndividuals(hosts[recover_from_i].individuals);
	}

	if (length(go_latent_inds)>0)
	{
		Host_states[go_latent_inds]=1;
	}
}


1: early(){
	hosts = sim.subpopulations;
	s_inds = which((Host_states==0)&(hosts.individualCount>0));

	for (s_ind in s_inds)
	{
		s_ind_pathogens = hosts[s_ind].individuals;
		remain_strain = sample(s_ind_pathogens, 1);
		sim.killIndividuals(s_ind_pathogens[which(s_ind_pathogens!=remain_strain)]);
	}

	draw_uniform = runif(length(s_inds));
	state_transition = findInterval(draw_uniform, c(0, latency_prob));
	Host_states[s_inds[which(state_transition==0)]] = 1;  
	Host_states[s_inds[which(state_transition > 0)]] = 2;
}


1: early(){
	r_inds = which(Host_states==3);
	draw_uniform = runif(length(r_inds));
	state_transition = findInterval(draw_uniform, c(0, R_S_rate));
	Host_states[r_inds[which(state_transition==0)]]=0;
}


1: late()
{
	writeFile(paste0(wk_dir, "burn_in_SEIR_trajectory.csv"), paste0(sum(Host_states == 0), ", ", sum(Host_states == 1), ", ", sum(Host_states == 2), ", ", sum(Host_states == 3)), append=T, compress=T);
}


s0 late() 
{
	exposed_hosts = which(Host_states==1);
	inds = sim.subpopulations[exposed_hosts].individuals;
	sim.killIndividuals(inds);
	sim.treeSeqOutput(paste0(wk_dir, "seeds.trees"));
	sim.simulationFinished();
}










