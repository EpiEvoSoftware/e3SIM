1 early() {
	seeds_structure = readCSV(seed_host_matching_path, colNames=T);

	// Add N($sample_size) subpopulations (representing N humans in the population) with 0 or 1 elements (Susceptible or Infected)
	labels = c();
	seed_count = 0;

	seedsvcfpath = paste0(cwdir, "originalvcfs/");


	for (i in 1:host_size)
	{
		if (i == seeds_structure.subset(seed_count, 1) + 1)
		{
			sim.addSubpop(i - 1, 1, haploid=T); // Infected hosts
			current_subpop = sim.subpopulations[i - 1];
			labels = c(labels, 2);
			current_subpop.genomes.readFromVCF(paste0(seedsvcfpath, "seed.", seeds_structure.subset(seed_count, 0), ".vcf"));
			current_subpop.individuals.tag = seeds_structure.subset(seed_count, 0); // id of seed
			sim.treeSeqRememberIndividuals(current_subpop.individuals);

			if (seed_count < seed_size - 1)
			{
				seed_count = seed_count + 1;
			}
		}
		else
		{
			sim.addSubpop(i - 1, 0, haploid=T); // Susceptible
			current_subpop = sim.subpopulations[i - 1];
			labels = c(labels, 0);
		}
		current_subpop.tag = i - 1;
		current_subpop.setValue("Contacts", c());
	}


	// change default mutation type and selection coefficient	
	allmuts = sim.subpopulations.individuals.genome1.mutations;
	if (n_trans_traits > 0) {
		for (mut in allmuts)
		{
			if (any(mut.position == range_genes))
			{
				mut.setMutationType(1);
				which_site = asInteger(which(trait_locs == mut.position));
				
				for (t_num in 1:n_trans_traits)
				{
					mut.setValue(paste0("transmissibility_", t_num), effsize_pos.subset(which_site, t_num)); 
				}
			}
		}
	}
	if (n_dr_traits > 0) {
		for (mut in allmuts)
		{
			if (any(mut.position == range_genes))
			{
				mut.setMutationType(1);
				which_site = asInteger(which(trait_locs == mut.position));

				for (t_num in 1:n_dr_traits)
				{
					mut.setValue(paste0("drug_resistance_", t_num), effsize_pos.subset(which_site, t_num + n_trans_traits)); 
				}
			}
		}
	}
	

	defineGlobal("Host_states", labels);
	defineGlobal("current_hoststates", Host_states);
	print("HOW MANY INDS:");
	print(length(sim.subpopulations.individuals));
}


