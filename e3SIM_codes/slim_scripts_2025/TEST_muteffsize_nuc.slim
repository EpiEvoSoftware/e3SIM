mutation(m1) {

	// Set mutational effects for new mutations 

	new_muts = muts[muts.originTick == community.tick];
	back_muts = NULL;

	new_pos = new_muts.position;
	new_nucleotide = new_muts.nucleotide;
	sim.chromosomes.ancestralNucleotides();

	sim.chromosomes.ancestralNucleotides(pos, pos)

	for (mut in new_muts)
	{
		pos = mut.position;
		if (mut.nucleotide == sim.chromosomes.ancestralNucleotides(pos, pos))
		{
			back_muts = c(back_muts, mut);
		}
	}

	if (size(back_muts))
	{
		sim.subpopulations.haplosomes.removeMutations(back_muts);
		muts = sim.mutations;
	}


	which_gene = asInteger((findInterval(mut.position, trait_locs) + 1) / 2);


	if (n_trans_traits>0)
	{
		for (t_num in 1:n_trans_traits)
		{
			mut.setValue(paste0("trans_", t_num), effsize_pos.subset(which_gene - 1, t_num + 2)); 
		}
	}
	
	if (n_dr_traits>0)
	{
		for (t_num in 1:n_dr_traits)
		{
			mut.setValue(paste0("dr_", t_num), effsize_pos.subset(which_gene - 1, t_num + 2 + n_trans_traits)); 
		}
	}
	
	return T;

}
