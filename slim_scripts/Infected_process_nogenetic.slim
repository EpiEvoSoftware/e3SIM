s3 early(){
	i_inds = which(Host_states==2);
	hosts = sim.subpopulations;
	draw_uniform = runif(length(i_inds));
	state_transition = findInterval(draw_uniform, c(0, sample_rate[current_epoch] * recovery_prob_after_sampling[current_epoch], sample_rate[current_epoch], I_R_rate[current_epoch] + sample_rate[current_epoch], I_R_rate[current_epoch] + sample_rate[current_epoch] + I_E_rate[current_epoch]));
	recover_from_i = i_inds[which((state_transition==0) | (state_transition==2))];
	sampled_inds = i_inds[which(state_transition<=1)];
	go_latent_inds = i_inds[which(state_transition==3)];
	
	if (length(sampled_inds)>0)
	{
		sampled_inds_genomes = c();
		for (ind in sampled_inds)
		{
			sampled_pathogen = sample(hosts[ind].individuals, 1);
			line1 = paste(community.tick, ind, sampled_pathogen.tag);
			writeFile(paste0(cwdir, runid, "/sample.csv"), line1, append=T, compress=T);
			sampled_inds_genomes = c(sampled_inds_genomes, sampled_pathogen);
		}
		sim.treeSeqRememberIndividuals(sampled_inds_genomes);
	}

	if (length(recover_from_i)>0)
	{
		Host_states[recover_from_i]=3;
		for (ind in recover_from_i)
		{
			line1 = paste(community.tick, ind + 1);
			writeFile(paste0(cwdir, runid, "/recovery.csv"), line1, append=T, compress=T);
		}
		sim.killIndividuals(hosts[recover_from_i].individuals);
	}

	if (length(go_latent_inds)>0)
	{
		Host_states[go_latent_inds]=1;
	}
}

