s3 early(){
	i_inds = which(Host_states==2);
	draw_uniform = runif(length(i_inds));
	state_transition = findInterval(draw_uniform, c(0, Recovery_rate*sample_rate, Recovery_rate, Recovery_rate + IE_rate));
	recover_from_i = i_inds[which(state_transition<=1)];
	sampled_inds = i_inds[which(state_transition==0)];
	
	if (length(sampled_inds)>0)
	{
		sampled_inds_genomes = c();
		for (ind in sampled_inds)
		{
			line1 = paste(community.tick, ind);
			writeFile(paste0(cwdir, "/sample.txt"), line1, append=T);
			sampled_inds_genomes = c(sampled_inds_genomes, sample(sim.subpopulations[ind].individuals, 1));
		}
		sim.treeSeqRememberIndividuals(sampled_inds_genomes);
		//sampled_inds_genomes.genomes.outputVCF(filePath=paste0(cwdir, "/sample_vcfs/", community.tick, ".sampled.vcf"));
	}
	
	if (length(recover_from_i)>0)
	{
		Host_states[recover_from_i]=3;
		for (ind in recover_from_i)
		{
			line1 = paste(community.tick, ind + 1);
			writeFile(paste0(cwdir, "/recovery.txt"), line1, append=T);
		}
		sim.killIndividuals(sim.subpopulations[recover_from_i].individuals);
	}
}