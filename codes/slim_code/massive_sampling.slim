s11 early() {
	// Massive sampling event
	i_inds = which(Host_states==2);
	draw_uniform = runif(length(i_inds));
	which_samp_event = which(asInteger(massive_samp_gens)==community.tick);
	mas_samp_prob = asFloat(massive_samp_prob[which_samp_event]);
	mas_recov_prob = asFloat(recover_after_samp_rate[which_samp_event]);
	state_transition = findInterval(draw_uniform, c(0, mas_samp_prob * mas_recov_prob, mas_samp_prob));
	sampled_inds = i_inds[which(state_transition<=1)];
	recovered_inds = i_inds[which(state_transition==0)];

	if (length(sampled_inds)>0)
	{
		sampled_inds_genomes = c();
		for (ind in sampled_inds)
		{
			line1 = paste(community.tick, ind);
			writeFile(paste0(cwdir, "/massive_sample.txt"), line1, append=T);
			
			//sampled_inds_genomes = c(sampled_inds_genomes, sample(sim.subpopulations[ind].individuals, 1));
		}
		//sampled_inds_genomes.genomes.outputVCF(filePath=paste0(cwdir, "/sample_vcfs/", community.tick, ".massive_sampled.vcf"));
	}

	if (length(recovered_inds)>0)
	{
		Host_states[recovered_inds]=3;
		for (ind in recovered_inds)
		{
			line1 = paste(community.tick, ind);
			writeFile(paste0(cwdir, "/massive_recovery.txt"), line1, append=T);
		} 
		sim.killIndividuals(sim.subpopulations[recovered_inds].individuals);
	}

}